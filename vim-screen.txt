*vim-screen.txt* 	A plugin to start gnu screen within your vim session.

Plugin aims to simulate an embedded shell in vim by allowing you to easily 
convert your current vim session into one running in gnu screen with a split 
gnu screen window containing a shell, and to quickly send statements/code to 
whatever program is running in that shell (bash, python, irb, etc.).  Spawning 
the shell in your favorite terminal emulator is also supported for gvim users 
or anyone else that just prefers an external shell.

Commands:

  :ScreenShell [cmd] 
  	Starts a screen hosted shell performing the following steps depending on 
	your environment.

	When running a console vim on a unix based OS (Linux, BSD, OSX):
	1. save a session file from your currently running vim instance
		(current tab only)
	2. start gnu screen with vim running in it
	3. load your saved session file
	4. create a lower gnu screen split window and start a shell, or if
	g:ScreenShellExternal is set, start an external terminal with
	screen running.
	5. if a command was supplied to :ScreenShell, run it in the new shell.
		Ex. :ScreenShell ipython
	Note: If you are already in a gnu screen session, then only steps 4 and 
		5 above will be run.
	
	When running gvim:
	1. start an external terminal with screen running.
	2. if a command was supplied to :ScreenShell, run it in the new shell.
		Ex. :ScreenShell ipython

  :ScreenSend 
  	Send the visual selection or the entire buffer contents to the running gnu 
	screen shell window.

  :ScreenQuit 
  	Save all currently modified vim buffers and quit gnu screen, returning you 
	to your previous vim instance running outside of gnu screen     
	
	Note: :ScreenQuit is not available if you where already in a gnu screen 
		session when you ran :ScreenShell.
    Note: By default, if the gnu screen session was started by :ScreenShell, 
		then exiting vim will quit the gnu screen session as well (configurable 
		via g:ScreenShellQuitOnVimExit).

  :ScreenShellAttach [session] 
  	Sets the necessary internal variables to allow :ScreenSend invocations 
	to send to the specified screen session.  If no session is provided, 
	then the first session found is used.  If the session is in the "Detached" 
	state, then a new terminal is opened with a new screen instance attached 
	to the session. Attaching to a detached session is not currently supported 
	on windows due to deficiencies in the cygwin version of gnu screen.  
	Also note, that for screen sessions attached to via this 
	mechanism, :ScreenSend invocations will send the text to the active screen 
	window instead of targeting the 'shell' window when used from :ScreenShell.

An example workflow may be:
	Open a python file to work on:
		$ vim something.py

  	Decide you want to run all or pieces of the code in an interactive 
	python shell:
		:ScreenShell python
	
	Send code from a vim buffer to the shell:
		:ScreenSend

	Quit the screen session and return to your original vim session:
	:ScreenQuit
		or
	:qa

Configuration:

	g:ScreenShellHeight (Default: 15)
		Sets the height of gnu screen region used for the shell.
	
	g:ScreenShellQuitOnVimExit (Default: 1)
		When non-zero and the gnu screen session was started by this script, 
		the screen session will be closed when vim exits.

	g:ScreenShellExternal (Default: 0)
		When non-zero and not already in a screen session, an external shell 
		will be spawned instead of using a split region for the shell.  
		Note: when using gvim, an external shell is always used.

	g:ScreenShellServerName
		If the gnu screen session is started by this plugin, then the value 
		of this setting will be used for the servername arg of the vim instance 
		started in the new gnu screen session (not applicable for gvim users).  
		The default is 'vim' unless you have g:ScreenShellExternal enabled, in 
		which case, if you still want to restart vim in a screen session with 
		a servername, then simply set this variable in your vimrc.

	g:ScreenShellTerminal (Default: '')
		When g:ScreenShellExternal is enabled or you are running gvim, this 
		value will be used as the name of the terminal executable to be used.  
		If this value is empty, a list of common terminals will be tried until 
		one is found.

Gotchas:
	While running vim in gnu screen, if you detach the session instead of
    quitting, then when returning to the non-screen vim, vim will complain
    about swap files already existing.  So try to avoid detaching.

	Not all vim plugins support saving state to or loading from vim
    session files, so when running :ScreenShell some buffers may not load
    correctly if they are backed by such a plugin.
